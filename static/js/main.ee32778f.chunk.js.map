{"version":3,"sources":["components/Toolbar/Toolbar.tsx","components/Shape/Shape.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Toolbar","props","tools","useState","refs","setRefs","useEffect","length","forEach","refItem","toolObject","current","addEventListener","console","log","newRefs","map","item","idx","React","createRef","onDragStart","e","id","target","dataTransfer","setData","className","tool","key","name","src","image","alt","height","ref","draggable","Shape","width","type","canvas","useRef","cutShape","ctx","clip","beginPath","setTransform","fillStyle","fillRect","removeShape","clearRect","drawRect","rect","fill","drawCircle","arc","Math","PI","drawTriangle","moveTo","lineTo","closePath","drawShape","useLayoutEffect","getContext","save","style","border","onDrop","getData","Main","setTools","setDimensions","document","event","preventDefault","a","axios","get","then","res","data","result","toolbarResult","toolbar","dimensionsResult","dimensions","getTools","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee32778f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\ntype Props = {\n  tools: any[];\n};\n\nconst Toolbar: React.FC<Props> = (props) => {\n  const { tools } = props;\n  const [refs, setRefs] = useState<any>([]);\n\n  useEffect(() => {\n    refs.length > 0 &&\n      refs.forEach((refItem: any) => {\n        const toolObject = refItem.current;\n        toolObject.addEventListener(\"dragstart\", () => {\n          console.log(\"start\");\n        });\n        toolObject.addEventListener(\"dragstop\", () => {\n          console.log(\"stop\");\n        });\n      });\n  }, [refs]);\n\n  useEffect(() => {\n    const newRefs =\n      tools.length > 0 && tools.map((item, idx) => React.createRef());\n    setRefs(newRefs);\n  }, [tools]);\n\n  const onDragStart = (e: any) => {\n    const { id } = e.target;\n    e.dataTransfer.setData(\"source\", id);\n  };\n\n  return (\n    <div className=\"container column center\">\n      {tools.length > 0 &&\n        tools.map((tool, idx) => {\n          return (\n            <div className=\"item\" key={idx}>\n              <img\n                id={tool.name}\n                src={`./images/${tool.image}`}\n                alt={tool.name}\n                height={48}\n                ref={refs[idx]}\n                draggable=\"true\"\n                onDragStart={onDragStart}\n                className=\"toolbarIcon\"\n              />\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import React, { useLayoutEffect, useRef } from 'react'\nimport { TOOLS } from '../../contants';\n\nconst { SCISSOR, GLUE, ERASER } = TOOLS;\n\ntype Props = {\n    type: string;\n    width?: number;\n    height?: number;\n    pixelRatio?: number;\n}\n\nconst Shape: React.FC<Props> = (props) => {\n    const {\n        width = 200,\n        height = 200,\n        type,\n      } = props;\n\n      const canvas = useRef<any>(null);\n      \n      const cutShape = (ctx: any) => {\n        ctx.clip();\n        ctx.beginPath();\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.fillStyle = \"#355BB7\";\n        ctx.fillRect((160 / 2), 0, 24, 180);\n      };\n\n      const removeShape = (ctx: any) => {\n        ctx.beginPath();\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.clearRect(0, 0, width, height);\n      };\n\n      const drawRect = (ctx: any, tool: string) => {\n        ctx.fillStyle = \"green\";\n        ctx.rect(16, 16, 160, 160);\n        ctx.fill();\n      }\n\n      const drawCircle = (ctx: any, tool: string) => {\n        ctx.fillStyle = \"yellow\";\n        ctx.beginPath();\n        ctx.arc(width / 2, height / 2, 80, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n\n      const drawTriangle = (ctx: any, tool: string) => {\n        ctx.fillStyle = \"orange\";\n        ctx.beginPath();\n        ctx.moveTo(90, 24);\n        ctx.lineTo(24, 160);\n        ctx.lineTo(170, 160);\n        ctx.closePath();\n        ctx.fill();\n      }\n\n      const drawShape = (type: string, ctx: any, tool: string = 'Glue') => {\n        switch(type){\n            case 'rect': {\n                drawRect(ctx, tool)\n                if (tool === 'Scissor') {\n                    cutShape(ctx);\n                }\n                if (tool === 'Eraser') {\n                    removeShape(ctx);\n                }\n                break;\n            }\n            case 'circle': {\n                drawCircle(ctx, tool)\n                if (tool === 'Scissor') {\n                    cutShape(ctx);\n                }\n                if (tool === 'Eraser') {\n                    removeShape(ctx);\n                }\n                break;\n            }\n            case 'triangle': {\n                drawTriangle(ctx, tool)\n                if (tool === 'Scissor') {\n                    cutShape(ctx);\n                }\n                if (tool === 'Eraser') {\n                    removeShape(ctx);\n                }\n                break;\n            }\n        }\n      }\n\n      const handleOnDrop = (e: any) => {\n        const tool = e.dataTransfer.getData(\"source\");\n        const ctx = canvas.current.getContext(\"2d\");\n        drawShape(type, ctx, tool);\n      }\n\n      useLayoutEffect(() => {\n        const ctx = canvas.current.getContext(\"2d\");\n        ctx.save();\n        drawShape(type, ctx);\n      });\n    \n      const style = { width, height, border: \"1px solid\" };\n      return (\n        <canvas ref={canvas} width={width} height={height} style={style} onDrop={handleOnDrop} />\n      );\n}\n\nexport default Shape","import React, { useRef, useEffect, useState } from 'react';\nimport Toolbar from '../Toolbar';\nimport axios from 'axios';\n\nimport './Main.style.css';\nimport Shape from '../Shape';\n\nconst Main = () => {\n    const canvasRef = useRef<any>(null);\n    const [ tools, setTools ] = useState<any[]>([])\n    const [ dimensions, setDimensions ] = useState<any>({\n        width: 500,\n        height: 500,\n    })\n\n    useEffect(() => {\n        document.addEventListener(\"dragover\", event => {\n            event.preventDefault();\n        });\n        document.addEventListener(\"drop\", () => {});\n\n        const getTools = async () => {\n            const result = await axios.get('./db.json').then(res => res.data);\n            const toolbarResult = result && result.toolbar;\n            const dimensionsResult = result && result.dimensions;\n            setTools(toolbarResult);\n            setDimensions(dimensionsResult);\n        }\n        getTools();\n    }, []);\n\n    return (\n        <div className=\"mainRoot\">\n            <div className=\"container row\">\n                <div className=\"item\">\n                    <div className=\"container board\">\n                        <Shape type=\"rect\"/>\n                        <Shape type=\"circle\" />\n                        <Shape type=\"triangle\" />\n                    </div>\n                </div>\n                <div className=\"item toolbar\">\n                    <Toolbar tools={tools}/>    \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Main />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}