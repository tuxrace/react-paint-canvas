{"version":3,"sources":["components/Toolbar/Toolbar.tsx","contants.ts","components/Shape/Shape.tsx","hooks/useDrop.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Toolbar","props","tools","onDragStart","e","id","target","dataTransfer","setData","className","data-testid","length","map","tool","idx","key","src","image","alt","name","height","draggable","SHAPES","SCISSOR","ERASER","RECT","CIRCLE","TRIANGLE","Shape","width","type","canvas","useRef","getShape","ctx","fillStyle","rect","fill","beginPath","arc","Math","PI","moveTo","lineTo","useLayoutEffect","current","getContext","save","drawShape","style","ref","onDrop","getData","fillRect","cutShape","clearRect","removeShape","useDrop","useEffect","document","addEventListener","event","preventDefault","Main","useState","setTools","dimensions","setDimensions","a","axios","get","then","res","data","result","toolbarResult","toolbar","dimensionsResult","getTools","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01bca952.chunk.js","sourcesContent":["import React from \"react\";\nimport { Tool } from \"../../types\";\n\ntype Props = {\n  tools: Tool[];\n};\n\nconst Toolbar: React.FC<Props> = (props) => {\n  const { tools } = props;\n\n  const onDragStart = (e: React.DragEvent) => {\n    const { id } = e.target as HTMLBaseElement;\n    e.dataTransfer.setData(\"source\", id);\n  };\n\n  return (\n    <div className=\"container column center\" data-testid=\"Toolbar-root\">\n      {tools && tools.length > 0 &&\n        tools.map((tool, idx) => {\n          return (\n            <div className=\"item\" key={idx}>\n              <img\n                id={tool.id}\n                src={`./images/${tool.image}`}\n                alt={tool.name}\n                height={48}\n                draggable=\"true\"\n                onDragStart={onDragStart}\n                className=\"toolbarIcon\"\n              />\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Toolbar;\n","const TOOLS = {\n    SCISSOR: 'SCISSOR',\n    GLUE: 'GLUE',\n    ERASER: 'ERASER'\n}\n\nconst SHAPES = {\n    RECT: 'rect',\n    CIRCLE: 'circle',\n    TRIANGLE: 'triangle'\n}\n\nexport { TOOLS, SHAPES }\n","import React, { useLayoutEffect, useRef } from \"react\";\nimport { TOOLS, SHAPES } from \"../../contants\";\n\nconst { SCISSOR, ERASER } = TOOLS;\nconst { RECT, CIRCLE, TRIANGLE } = SHAPES;\ntype Props = {\n  type: string;\n  width?: number;\n  height?: number;\n};\n\nconst Shape: React.FC<Props> = (props) => {\n  const { width = 200, height = 200, type } = props;\n  const canvas = useRef<any>(null);\n\n  // Shapes\n  const Rect = (ctx: any) => {\n    ctx.fillStyle = \"green\";\n    ctx.rect(16, 16, width, 120);\n    ctx.fill();\n  };\n\n  const Circle = (ctx: any) => {\n    ctx.fillStyle = \"yellow\";\n    ctx.beginPath();\n    ctx.arc(width / 2, height / 2, 80, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  const Triangle = (ctx: any) => {\n    ctx.fillStyle = \"orange\";\n    ctx.beginPath();\n    ctx.moveTo(90, 24);\n    ctx.lineTo(24, width);\n    ctx.lineTo(170, width);\n    ctx.fill();\n  };\n\n  const getShape: any = {\n    [RECT]: Rect,\n    [CIRCLE]: Circle,\n    [TRIANGLE]: Triangle,\n  };\n\n  // Tool Actions\n  const cutShape = (ctx: any) => {\n    ctx.fillStyle = \"#355BB7\";\n    ctx.fillRect(180 / 2, 0, 24, height);\n  };\n\n  const removeShape = (ctx: any) => {\n    ctx.clearRect(0, 0, width, height);\n  };\n\n  const handleOnDrop = (e: React.DragEvent) => {\n    const tool = e.dataTransfer.getData(\"source\");\n    const ctx = canvas.current.getContext(\"2d\");\n    const drawShape = getShape[type];\n\n    if (tool === SCISSOR) {\n      cutShape(ctx);\n    } else if (tool === ERASER) {\n      removeShape(ctx);\n    } else {\n      drawShape(ctx);\n    }\n  };\n\n  useLayoutEffect(() => {\n    const ctx = canvas.current.getContext(\"2d\");\n    ctx.save();\n    const drawShape = getShape[type];\n    drawShape(ctx);\n  });\n\n  const style = { width, height };\n  return (\n    <canvas\n      ref={canvas}\n      width={width}\n      height={height}\n      style={style}\n      onDrop={handleOnDrop}\n    />\n  );\n};\n\nexport default Shape;\n","import { useEffect } from 'react'\n\nconst useDrop = () => {\n    // When hook to the component it prevents from listening to dragover event\n    useEffect(() => {\n        document.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n          });\n          document.addEventListener(\"drop\", () => {});\n      \n    }, [])\n}\n\nexport default useDrop;\n","import React, { useEffect, useState } from \"react\";\nimport Toolbar from \"../Toolbar\";\nimport axios from \"axios\";\n\nimport \"./Main.style.css\";\nimport Shape from \"../Shape\";\nimport { Tool } from \"../../types\";\nimport { SHAPES } from \"../../contants\";\nimport useDrop from \"../../hooks/useDrop\";\n\nconst { RECT, CIRCLE, TRIANGLE } = SHAPES;\n\nconst Main = () => {\n  const [tools, setTools] = useState<Tool[]>([]);\n  const [dimensions, setDimensions] = useState<{width: number; height: number;} | {}>({});\n\n  // Prevent dragover events hooks\n  useDrop();\n\n  useEffect(() => {\n    const getTools = async () => {\n      const result = await axios.get(\"./db.json\").then((res) => res.data);\n      const toolbarResult = result && result.toolbar;\n      const dimensionsResult = result && result.dimensions;\n      setTools(toolbarResult);\n      setDimensions(dimensionsResult);\n    };\n    getTools();\n  }, []);\n\n  return (\n    <div className=\"mainRoot\" data-testid=\"main-root\">\n      <div className=\"container row\">\n        <div className=\"item\">\n          <div className=\"container board\">\n            <Shape type={RECT} {...dimensions}/>\n            <Shape type={CIRCLE}  {...dimensions}/>\n            <Shape type={TRIANGLE}  {...dimensions}/>\n          </div>\n        </div>\n        <div className=\"item toolbar\">\n          <Toolbar tools={tools} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Main />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}